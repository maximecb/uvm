[
  {
    "subsystem": "vm",
    "description": "Core functionality provided by the VM that isn't related to any kind of I/O.",
    "syscalls": [
      {
        "name": "memset",
        "args": [
          [
            "u8*",
            "dst"
          ],
          [
            "u8",
            "value"
          ],
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 4,
        "description": "Fill a block of bytes in the heap with a given value."
      },
      {
        "name": "memset32",
        "args": [
          [
            "u32*",
            "dst"
          ],
          [
            "u32",
            "word"
          ],
          [
            "u64",
            "num_words"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 16,
        "description": "Fill a region of memory with 32-bit values. This is useful for some graphics operations."
      },
      {
        "name": "memcpy",
        "args": [
          [
            "u8*",
            "dst"
          ],
          [
            "const u8*",
            "src"
          ],
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 3,
        "description": "Copy a block of memory in the heap from a source address to a destination address."
      },
      {
        "name": "memcmp",
        "args": [
          [
            "const u8*",
            "p_a"
          ],
          [
            "const u8*",
            "p_b"
          ],
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "i32",
          "result"
        ],
        "permission": "default_allowed",
        "const_idx": 27,
        "description": "Compare two sequences of bytes. Returns 0 if equal, -1 if the first mismatching byte has a lower value in `p_a`, 1 if greater."
      },
      {
        "name": "vm_heap_size",
        "args": [],
        "returns": [
          "u64",
          "num_bytes"
        ],
        "permission": "default_allowed",
        "const_idx": 14,
        "description": "Report the current heap size in bytes."
      },
      {
        "name": "vm_grow_heap",
        "args": [
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "u64",
          "new_size"
        ],
        "permission": "default_allowed",
        "const_idx": 17,
        "description": "Grow the heap to a new size given in bytes. This is similar to the `brk()` system call on POSIX systems. Note that the heap may be resized to a size larger than requested. The heap size is guaranteed to be a multiple of 8 bytes. If the requested size is smaller than the current heap size, this is a no-op. Returns the new heap size in bytes."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "io",
    "description": "Stream I/O functionality.",
    "syscalls": [
      {
        "name": "print_i64",
        "args": [
          [
            "i64",
            "val"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 5,
        "description": "Print an i64 value to standard output."
      },
      {
        "name": "print_f32",
        "args": [
          [
            "f32",
            "val"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 20,
        "description": "Print an f32 value to standard output."
      },
      {
        "name": "print_str",
        "args": [
          [
            "const char*",
            "str"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 6,
        "description": "Print a string to standard output."
      },
      {
        "name": "print_endl",
        "args": [],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 7,
        "description": "Print a newline to standard output."
      },
      {
        "name": "putchar",
        "args": [
          [
            "i32",
            "char"
          ]
        ],
        "returns": [
          "i32",
          "char"
        ],
        "permission": "default_allowed",
        "const_idx": 26,
        "description": "Write one byte to standard output. This is a blocking function. The value -1 is returned on end of file or error. Otherwise the byte written is returned."
      },
      {
        "name": "getchar",
        "args": [],
        "returns": [
          "i32",
          "val"
        ],
        "permission": "default_allowed",
        "const_idx": 8,
        "description": "Read one byte from standard input. This is a blocking function. The value -1 is returned on end of file or error."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "time",
    "description": "Date, time and timing related system calls.",
    "syscalls": [
      {
        "name": "time_current_ms",
        "args": [],
        "returns": [
          "u64",
          "timestamp"
        ],
        "permission": "time_get_time",
        "const_idx": 0,
        "description": "Get the UNIX time stamp in milliseconds."
      },
      {
        "name": "time_delay_cb",
        "args": [
          [
            "u64",
            "delay_ms"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 2,
        "description": "Schedule a callback to be called once after a given delay."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "window",
    "description": "Functionality related to creating windows, drawing graphics, as well as mouse and keyboard input.",
    "syscalls": [
      {
        "name": "window_create",
        "args": [
          [
            "u32",
            "width"
          ],
          [
            "u32",
            "height"
          ],
          [
            "const char*",
            "title"
          ],
          [
            "u64",
            "flags"
          ]
        ],
        "returns": [
          "u32",
          "window_id"
        ],
        "permission": "window_display",
        "const_idx": 1,
        "description": "Create a new window with a frame buffer to draw into. The window is initially hidden when created, and will appear as soon as the first frame of image data is drawn."
      },
      {
        "name": "window_draw_frame",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "const u8*",
            "pixel_data"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 10,
        "description": "Copy a frame of pixels to be displayed into the window. The frame must have the same width and height as the window. The pixel format is 32 bits per pixel in BGRA byte order, with 8 bits for each component and the B byte at the lowest address."
      },
      {
        "name": "window_on_mousemove",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 11,
        "description": "Register a callback for mouse movement. Mouse x/y coordinates are relative to the top-left corner of the window and may be negative if outside of the window."
      },
      {
        "name": "window_on_mousedown",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 12,
        "description": "Register a callback for mouse button press events."
      },
      {
        "name": "window_on_mouseup",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 13,
        "description": "Register a callback for mouse button release events."
      },
      {
        "name": "window_on_keydown",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 9,
        "description": "Register a callback for key press event."
      },
      {
        "name": "window_on_keyup",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 15,
        "description": "Register a callback for key release event."
      },
      {
        "name": "window_on_textinput",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 19,
        "description": "Register a callback to receive text input. The text is encoded as UTF-8 and the callback is called for each byte input."
      }
    ],
    "constants": [
      [
        "KEY_BACKSPACE",
        "u16",
        8
      ],
      [
        "KEY_TAB",
        "u16",
        9
      ],
      [
        "KEY_RETURN",
        "u16",
        10
      ],
      [
        "KEY_ESCAPE",
        "u16",
        27
      ],
      [
        "KEY_SPACE",
        "u16",
        32
      ],
      [
        "KEY_COMMA",
        "u16",
        44
      ],
      [
        "KEY_PERIOD",
        "u16",
        46
      ],
      [
        "KEY_SLASH",
        "u16",
        47
      ],
      [
        "KEY_NUM0",
        "u16",
        48
      ],
      [
        "KEY_NUM1",
        "u16",
        49
      ],
      [
        "KEY_NUM2",
        "u16",
        50
      ],
      [
        "KEY_NUM3",
        "u16",
        51
      ],
      [
        "KEY_NUM4",
        "u16",
        52
      ],
      [
        "KEY_NUM5",
        "u16",
        53
      ],
      [
        "KEY_NUM6",
        "u16",
        54
      ],
      [
        "KEY_NUM7",
        "u16",
        55
      ],
      [
        "KEY_NUM8",
        "u16",
        56
      ],
      [
        "KEY_NUM9",
        "u16",
        57
      ],
      [
        "KEY_COLON",
        "u16",
        58
      ],
      [
        "KEY_SEMICOLON",
        "u16",
        59
      ],
      [
        "KEY_EQUALS",
        "u16",
        61
      ],
      [
        "KEY_QUESTION",
        "u16",
        63
      ],
      [
        "KEY_A",
        "u16",
        65
      ],
      [
        "KEY_B",
        "u16",
        66
      ],
      [
        "KEY_C",
        "u16",
        67
      ],
      [
        "KEY_D",
        "u16",
        68
      ],
      [
        "KEY_E",
        "u16",
        69
      ],
      [
        "KEY_F",
        "u16",
        70
      ],
      [
        "KEY_G",
        "u16",
        71
      ],
      [
        "KEY_H",
        "u16",
        72
      ],
      [
        "KEY_I",
        "u16",
        73
      ],
      [
        "KEY_J",
        "u16",
        74
      ],
      [
        "KEY_K",
        "u16",
        75
      ],
      [
        "KEY_L",
        "u16",
        76
      ],
      [
        "KEY_M",
        "u16",
        77
      ],
      [
        "KEY_N",
        "u16",
        78
      ],
      [
        "KEY_O",
        "u16",
        79
      ],
      [
        "KEY_P",
        "u16",
        80
      ],
      [
        "KEY_Q",
        "u16",
        81
      ],
      [
        "KEY_R",
        "u16",
        82
      ],
      [
        "KEY_S",
        "u16",
        83
      ],
      [
        "KEY_T",
        "u16",
        84
      ],
      [
        "KEY_U",
        "u16",
        85
      ],
      [
        "KEY_V",
        "u16",
        86
      ],
      [
        "KEY_W",
        "u16",
        87
      ],
      [
        "KEY_X",
        "u16",
        88
      ],
      [
        "KEY_Y",
        "u16",
        89
      ],
      [
        "KEY_Z",
        "u16",
        90
      ],
      [
        "KEY_LEFT",
        "u16",
        16001
      ],
      [
        "KEY_RIGHT",
        "u16",
        16002
      ],
      [
        "KEY_UP",
        "u16",
        16003
      ],
      [
        "KEY_DOWN",
        "u16",
        16004
      ],
      [
        "KEY_SHIFT",
        "u16",
        16005
      ]
    ]
  },
  {
    "subsystem": "audio",
    "description": "Audio input and output.",
    "syscalls": [
      {
        "name": "audio_open_output",
        "args": [
          [
            "u32",
            "sample_rate"
          ],
          [
            "u16",
            "num_channels"
          ],
          [
            "u16",
            "format"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "u32",
          "device_id"
        ],
        "permission": "audio_output",
        "const_idx": 18,
        "description": "Open an audio output device."
      }
    ],
    "constants": [
      [
        "AUDIO_FORMAT_I16",
        "u16",
        0
      ]
    ]
  },
  {
    "subsystem": "net",
    "description": "Network-related functionality.",
    "syscalls": [
      {
        "name": "net_listen",
        "args": [
          [
            "const char*",
            "listen_addr"
          ],
          [
            "void*",
            "on_new_conn"
          ]
        ],
        "returns": [
          "u64",
          "socket_id"
        ],
        "permission": "net_server",
        "const_idx": 21,
        "description": "Open a listening TCP socket to accept incoming connections. A callback function is called when a new connection request is received."
      },
      {
        "name": "net_accept",
        "args": [
          [
            "u64",
            "socket_id"
          ],
          [
            "char*",
            "client_addr_buf"
          ],
          [
            "u64",
            "addr_buf_len"
          ],
          [
            "void*",
            "on_incoming_data"
          ]
        ],
        "returns": [
          "u64",
          "socket_id"
        ],
        "permission": "net_server",
        "const_idx": 22,
        "description": "Accept an incoming connection and creates a new socket. A callback function is called when incoming data is received on the new socket."
      },
      {
        "name": "net_read",
        "args": [
          [
            "u64",
            "socket_id"
          ],
          [
            "u8*",
            "buf_ptr"
          ],
          [
            "u64",
            "buf_len"
          ]
        ],
        "returns": [
          "u64",
          "num_bytes"
        ],
        "permission": "net_io",
        "const_idx": 23,
        "description": "Read data from a socket into a buffer with specified capacity. Data can only be read if available."
      },
      {
        "name": "net_write",
        "args": [
          [
            "u64",
            "socket_id"
          ],
          [
            "const u8*",
            "buf_ptr"
          ],
          [
            "u64",
            "buf_len"
          ]
        ],
        "returns": [
          "u64",
          "num_bytes"
        ],
        "permission": "net_io",
        "const_idx": 24,
        "description": "Write data to an open socket. This function will attempt to write the entire buffer and may block if the output buffer is full."
      },
      {
        "name": "net_close",
        "args": [
          [
            "u64",
            "socket_id"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "net_io",
        "const_idx": 25,
        "description": "Close an open socket."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "fs",
    "description": "File I/O and filesystem-related functionality. This subsystem is separated out from the general-purpose io subsystem for security reasons.",
    "syscalls": [],
    "constants": []
  }
]